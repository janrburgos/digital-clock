{"version":3,"sources":["components/DigitalClock/DigitalClock.js","App.js","reportWebVitals.js","index.js"],"names":["DigitalClock","state","time","Date","hour","getHours","minute","getMinutes","second","getSeconds","timeFormat","font","fontColor","bgColorRef","this","intervalID","setInterval","updateClock","setState","changeBackground","className","style","color","backgroundColor","fontFamily","toTimeString","slice","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba840a03.chunk.js","sourcesContent":["import \"./DigitalClock.css\";\r\nimport React from \"react\";\r\n\r\nclass DigitalClock extends React.Component {\r\n  state = {\r\n    time: new Date(),\r\n    hour: new Date().getHours(),\r\n    minute: new Date().getMinutes(),\r\n    second: new Date().getSeconds(),\r\n    timeFormat: 12,\r\n    font: \"Xahn\",\r\n    fontColor: \"black\",\r\n    bgColorRef: 20,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.intervalID = setInterval(() => this.updateClock(), 1000);\r\n  }\r\n\r\n  updateClock() {\r\n    this.setState({\r\n      time: new Date(),\r\n      hour: new Date().getHours(),\r\n      minute: new Date().getMinutes(),\r\n      second: new Date().getSeconds(),\r\n    });\r\n    this.changeBackground();\r\n  }\r\n\r\n  changeBackground() {\r\n    if (this.state.hour < 12) {\r\n      this.setState({\r\n        bgColorRef: 14 + 6 * this.state.hour,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        bgColorRef: 86 - 6 * (this.state.hour - 12),\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"DigitalClock\"\r\n        style={{\r\n          color: this.state.fontColor,\r\n          backgroundColor: `hsl(160, 180%, ${this.state.bgColorRef}%)`,\r\n          fontFamily: `${this.state.font}, monospace`,\r\n        }}\r\n      >\r\n        <div className=\"clock\">\r\n          <p className=\"time\">\r\n            {this.state.timeFormat === 24 && this.state.hour < 10 && \"0\"}\r\n            {this.state.timeFormat === 12 && this.state.hour === 0\r\n              ? \"12\"\r\n              : this.state.timeFormat === 12 && this.state.hour > 12\r\n              ? this.state.hour - 12\r\n              : this.state.hour}\r\n            :\r\n            {this.state.minute < 10\r\n              ? `0${this.state.minute}`\r\n              : this.state.minute}\r\n            :\r\n            {this.state.second < 10\r\n              ? `0${this.state.second}`\r\n              : this.state.second}{\" \"}\r\n            {this.state.timeFormat === 12 && this.state.hour < 12\r\n              ? \"AM\"\r\n              : this.state.timeFormat === 12 && this.state.hour >= 12\r\n              ? \"PM\"\r\n              : null}\r\n          </p>\r\n          <p className=\"time-zone\">{this.state.time.toTimeString().slice(8)}</p>\r\n        </div>\r\n        <div className=\"color-buttons\">\r\n          <div className=\"button-title\">COLORS</div>\r\n          <div className=\"button-group\">\r\n            <button\r\n              className=\"black\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  fontColor: \"black\",\r\n                })\r\n              }\r\n            >\r\n              Black\r\n            </button>\r\n            <button\r\n              className=\"red\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  fontColor: \"red\",\r\n                })\r\n              }\r\n            >\r\n              Red\r\n            </button>\r\n            <button\r\n              className=\"green\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  fontColor: \"green\",\r\n                })\r\n              }\r\n            >\r\n              Green\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"font-buttons\">\r\n          <div className=\"button-title\">FONTS</div>\r\n          <div className=\"button-group\">\r\n            <button\r\n              className=\"xahn\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  font: \"Xahn Mono, monospace\",\r\n                })\r\n              }\r\n            >\r\n              Xahn\r\n            </button>\r\n            <button\r\n              className=\"oxygen\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  font: \"Oxygen Mono, monospace\",\r\n                })\r\n              }\r\n            >\r\n              Oxygen\r\n            </button>\r\n            <button\r\n              className=\"major\"\r\n              onClick={() =>\r\n                this.setState({\r\n                  font: \"Major Mono Display, monospace\",\r\n                })\r\n              }\r\n            >\r\n              Major\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"format-button\">\r\n          <button\r\n            onClick={() => {\r\n              if (this.state.timeFormat === 12) {\r\n                this.setState({\r\n                  timeFormat: 24,\r\n                });\r\n              } else {\r\n                this.setState({\r\n                  timeFormat: 12,\r\n                });\r\n              }\r\n            }}\r\n          >\r\n            Change Hour Format\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DigitalClock;\r\n","import DigitalClock from \"./components/DigitalClock/DigitalClock\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DigitalClock />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}